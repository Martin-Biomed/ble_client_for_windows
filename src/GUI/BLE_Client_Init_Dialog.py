# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\pyqt5-tools\qt5_applications\Qt\bin\BLE_Client_Utility_Init_Dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
import logging
import sys

import src.GUI.BLE_Client_Main_GUI_Dialog
import src.GUI.Help_Init_Dialog
import src.GUI.API_Viewer_Dialog


class Ui_Dialog(object):

    def __init__(self):
        # We use the custom Dialog classes that were created for this project
        self.ble_msg_config_dialog = src.GUI.BLE_Client_Main_GUI_Dialog.MyDialog()
        self.api_viewer_dialog = src.GUI.API_Viewer_Dialog.MyDialog()

        # This Dialog class was not edited (inside Help_Init_Dialog.py)
        self.help_dialog = QtWidgets.QDialog()

    def open_ble_msg_config_dialog(self, Dialog):
        logging.info("The open_ble_msg_config_dialog function was called.")
        self.ui = src.GUI.BLE_Client_Main_GUI_Dialog.Ui_BLE_GATT_Client()
        self.ui.setupUi(self.ble_msg_config_dialog)
        # The original Dialog box is replaced by the new Dialog Box
        Dialog.close()
        self.ble_msg_config_dialog.show()

    def open_api_viewer_dialog(self, Dialog):
        logging.info("The open_api_viewer_dialog function was called.")
        self.ui = src.GUI.API_Viewer_Dialog.Ui_API_Viewer_Dialog()
        self.ui.setupUi(self.api_viewer_dialog)
        # The original Dialog box is replaced by the new Dialog Box
        Dialog.close()
        self.api_viewer_dialog.show()

    def open_help_dialog(self):
        logging.info("The open_help_dialog function was called.")
        # We lock the other Dialog pages while the "Help" Dialog is selected
        self.help_dialog.setWindowModality(QtCore.Qt.ApplicationModal)
        self.ui = src.GUI.Help_Init_Dialog.Ui_Help_Dialog()
        self.ui.setupUi(self.help_dialog)
        self.help_dialog.show()

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(400, 510)
        # Manually had to enable the minimize button for the Dialog box
        Dialog.setWindowFlags(Dialog.windowFlags() | QtCore.Qt.WindowMinimizeButtonHint)

        self.App_Name_Label = QtWidgets.QLabel(Dialog)
        self.App_Name_Label.setGeometry(QtCore.QRect(60, 70, 281, 81))
        self.App_Name_Label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.App_Name_Label.setStyleSheet("font: 75 26pt \"Arial\";")
        self.App_Name_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.App_Name_Label.setWordWrap(True)
        self.App_Name_Label.setObjectName("App_Name_Label")

        self.ble_gui_selected_button = QtWidgets.QPushButton(Dialog)
        self.ble_gui_selected_button.setGeometry(QtCore.QRect(30, 200, 341, 51))
        self.ble_gui_selected_button.setStyleSheet("font: 10pt \"Arial\";")
        self.ble_gui_selected_button.setObjectName("ble_gui_selected_button")

        self.api_selected_button = QtWidgets.QPushButton(Dialog)
        self.api_selected_button.setGeometry(QtCore.QRect(30, 280, 341, 51))
        self.api_selected_button.setStyleSheet("font: 10pt \"Arial\";")
        self.api_selected_button.setObjectName("api_selected_button")

        self.Help_Button = QtWidgets.QPushButton(Dialog)
        self.Help_Button.setGeometry(QtCore.QRect(290, 450, 81, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Help_Button.sizePolicy().hasHeightForWidth())
        self.Help_Button.setSizePolicy(sizePolicy)
        self.Help_Button.setStyleSheet("font: 10pt \"Arial\";")
        self.Help_Button.setObjectName("Help_Button")

        # Note: When passing an argument to one of these functions, it starts expecting the function to be callable.
        # A function is callable when we pass an object as an input arg, or we pass no input arguments at all.
        # In our case, we need to invoke the non-callable function anonymously (using lambda) to avoid errors.
        self.ble_gui_selected_button.clicked.connect(lambda: self.open_ble_msg_config_dialog(Dialog))  # Custom Function
        self.api_selected_button.clicked.connect(lambda: self.open_api_viewer_dialog(Dialog))
        self.Help_Button.clicked.connect(self.open_help_dialog)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Initial Application Window"))
        self.App_Name_Label.setText(_translate("Dialog", "Windows BLE GATT Client Utility"))
        self.ble_gui_selected_button.setText(_translate("Dialog", "Configure a BLE GATT Message using this BLE Client"))
        self.api_selected_button.setText(_translate("Dialog", "Enable BLE Client Utility API (HTTP Server)"))
        self.Help_Button.setText(_translate("Dialog", "Help"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    # Removes the annoying "?" button which is hard to access in the Python programming
    app.setAttribute(QtCore.Qt.ApplicationAttribute.AA_DisableWindowContextHelpButton)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
